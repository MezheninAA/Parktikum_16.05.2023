{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4249fb51",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "class Game:\n",
    "    def __init__(self, master):\n",
    "        self.master = master\n",
    "        self.master.title(\"Крестики-нолики\")\n",
    "        self.current_turn = \"X\"\n",
    "        self.board = [[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n",
    "        self.canvas = tk.Canvas(self.master, width=300, height=300)\n",
    "        self.canvas.pack()\n",
    "        self.draw_board()\n",
    "        self.canvas.bind(\"<Button-1>\", self.handle_click)\n",
    "    def draw_board(self):\n",
    "        self.canvas.create_rectangle(0, 0, 300, 300, fill=\"white\")\n",
    "        for i in range(1, 3):\n",
    "            self.canvas.create_line(i * 100, 0, i * 100, 300)\n",
    "            self.canvas.create_line(0, i * 100, 300, i * 100)\n",
    "    def handle_click(self, event):\n",
    "        x, y = event.x, event.y\n",
    "        row, col = y // 100, x // 100\n",
    "        if self.board[row][col] == \"\":\n",
    "            self.board[row][col] = self.current_turn\n",
    "            self.draw_symbol(row, col, self.current_turn)\n",
    "            if self.check_win():\n",
    "                self.show_win_message()\n",
    "            elif self.check_tie():\n",
    "                self.show_tie_message()\n",
    "            else:\n",
    "                self.current_turn = \"O\" if self.current_turn == \"X\" else \"X\"\n",
    "    def draw_symbol(self, row, col, symbol):\n",
    "        x, y = col * 100 + 50, row * 100 + 50\n",
    "        if symbol == \"X\":\n",
    "            self.canvas.create_line(x - 40, y - 40, x + 40, y + 40, width=2)\n",
    "            self.canvas.create_line(x + 40, y - 40, x - 40, y + 40, width=2)\n",
    "        else:\n",
    "            self.canvas.create_oval(x - 40, y - 40, x + 40, y + 40, width=2)\n",
    "    def check_win(self):\n",
    "        for i in range(3):\n",
    "            if self.board[i][0] == self.board[i][1] == self.board[i][2] != \"\":\n",
    "                return True\n",
    "            if self.board[0][i] == self.board[1][i] == self.board[2][i] != \"\":\n",
    "                return True\n",
    "        if self.board[0][0] == self.board[1][1] == self.board[2][2] != \"\":\n",
    "            return True\n",
    "        if self.board[0][2] == self.board[1][1] == self.board[2][0] != \"\":\n",
    "            return True\n",
    "        return False\n",
    "    def check_tie(self):\n",
    "        for i in range(3):\n",
    "            for j in range(3):\n",
    "                if self.board[i][j] == \"\":\n",
    "                    return False\n",
    "        return True\n",
    "    def show_win_message(self):\n",
    "        winner = \"Нолики\" if self.current_turn == \"0\" else \"Крестики\"\n",
    "        message = f\"{winner} выиграли!\"\n",
    "        self.show_message(message)\n",
    "    def show_tie_message(self):\n",
    "        message = \"Ничья!\"\n",
    "        self.show_message(message)\n",
    "    def show_message(self, message):\n",
    "        self.canvas.create_rectangle(0, 150, 300, 200, fill=\"white\")\n",
    "        self.canvas.create_text(150, 175, text=message, font=(\"Arial\", 16))\n",
    "root = tk.Tk()\n",
    "game = Game(root)\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "acb6657c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5bb648cd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
